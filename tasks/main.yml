---
- name: Set a fact containing the original python interpreter
  set_fact:
    old_python_interpreter: "{{ ansible_python_interpreter | default('/usr/bin/python') }}"
  when: cluster_venv != None

- name: Set a fact to use the python interpreter in the virtualenv
  set_fact:
    ansible_python_interpreter: "{{ cluster_venv }}/bin/python"
  when: cluster_venv != None

# Case 1: we are modifying the cluster.
- block:
    - name: Orchestrate OpenStack infrastructure
      register: cluster_stack
      os_stack:
        auth_type: "{{ cluster_auth_type or omit }}"
        auth: "{{ cluster_auth or omit }}"
        cloud: "{{ cluster_cloud or omit }}"
        name: "{{ cluster_name }}"
        state: "{{ cluster_state }}"
        environment: "{{ cluster_environment }}"
        template: "{{ cluster_template }}"
        parameters: "{{ cluster_params }}"

    - name: Extract node groups
      set_fact:
        cluster_group: "{{ cluster_stack.stack.outputs | selectattr('output_key', 'equalto', 'cluster_group') | first }}"
  when: cluster_state in ['present', 'absent']

# Case 2: we are performing a read-only query of the cluster configuration.
# Read the stack's outputs via the API.
- block:
    - name: Gather OpenStack infrastructure information
      command: openstack stack output show {{ cluster_name }} cluster_group -f json
      register: stack_output
      changed_when: false

    - name: Extract node groups
      set_fact:
        cluster_group: "{{ stack_output.stdout | from_json }}"
  when: cluster_state == 'query'

- block:
    - name: Extract server ids from cluster group output
      set_fact:
        cluster_servers: "{{ cluster_group.output_value | json_query('[*].nodes[*].id') | flatten }}"
        cluster_interfaces: "{{ cluster_net | map(attribute='net') | list }}"

#    - name: Attach interfaces to servers
#      os_server_interface:
#        auth_type: "{{ cluster_auth_type or omit }}"
#        auth: "{{ cluster_auth or omit }}"
#        cloud: "{{ cluster_cloud or omit }}"
#        state: "{{ cluster_state }}"
#        server_id: "{{ item }}"
#        interfaces: "{{ cluster_interfaces }}"
#      with_items: "{{ cluster_servers }}"
#      register: openstack_server_interfaces
#
#    - name: Convert list of interfaces to a dictionary for easy lookup in inventory templating step
#      set_fact:
#        cluster_server_interfaces: "{{ dict(cluster_servers | zip(openstack_server_interfaces.results)) }}"

    - name: Extract node objects
      set_fact:
        cluster_nodes: "{{ cluster_group.output_value | sum(attribute='nodes', start=[]) }}"

    - name: Prepare access via intermediate gateway
      block:
        - name: Extract gateway host username and ip
          set_fact:
            cluster_gw_user: "{{ cluster_params.cluster_groups | selectattr('name', 'equalto', cluster_gw_group) | map(attribute='user') | join }}"
            cluster_gw_ip: "{{ (cluster_group.output_value | selectattr('group', 'equalto', cluster_gw_group) | first).nodes | map(attribute='ip') | first }}"
            cluster_gw_name: "{{ (cluster_group.output_value | selectattr('group', 'equalto', cluster_gw_group) | first).nodes | map(attribute='name') | first }}"
        - name: Add gateway to dynamic inventory
          add_host:
            hostname: "{{ cluster_gw_name }}"
            ansible_host: "{{ cluster_gw_ip }}"
            ansible_user: "{{ cluster_gw_user }}"
        - name: Set variables for non-gateway groups
          set_fact:
            cluster_params_groups_no_gw: "{{ cluster_params.cluster_groups | rejectattr('name', 'equalto', cluster_gw_group) | list }}"
            cluster_output_groups_no_gw: "{{ cluster_group.output_value | rejectattr('group', 'equalto', cluster_gw_group) | list }}"
            ssh_proxy_jump: "-o ProxyJump={{ cluster_gw_user }}@{{ cluster_gw_ip }}"
      when: cluster_gw_group is defined

    - name: Add cluster hosts to dynamic inventory
      include_tasks: add_host.yml
      vars:
        cluster_user: "{{ group.user }}"
        hosts: "{{ (cluster_group.output_value | selectattr('group', 'equalto', group.name) | first).nodes | list }}"
        ssh_common_args: "{{ ssh_proxy_jump | default('') }}"
      loop: "{{ cluster_params_groups_no_gw | default(cluster_params.cluster_groups) }}"
      loop_control:
        loop_var: group

    - name: Ensure cluster inventory directory exists
      file:
        path: "{{ cluster_inventory | dirname }}"
        state: directory

    - name: Write inventory file for new cluster
      template:
        src: cluster_inventory.j2
        dest: "{{ cluster_inventory }}"

    - name: Wait for nodes to become accessible
      block:
        # First, wait for hosts in the gateway group
        - name: Wait for gateway hosts
          include_tasks: wait_for_hosts.yml
          vars:
            cluster_known_hosts_file: "{{ home_dir }}/.ssh/known_hosts"
            cluster_scan_host: "{{ inventory_hostname }}"
            hosts: "{{ cluster_nodes | selectattr('ip', 'equalto', cluster_gw_ip) | list }}"
          when: cluster_gw_group is defined

        # Then wait for the rest of the cluster hosts
        - name: Wait for cluster hosts
          include_tasks: wait_for_hosts.yml
          vars:
            cluster_known_hosts_file: "{{ home_dir }}/.ssh/known_hosts"
            cluster_scan_host: "{{ cluster_gw_name | default(inventory_hostname) }}"
            hosts: "{{ cluster_output_groups_no_gw | default(cluster_group.output_value) | map(attribute='nodes') | flatten }}"

  when: cluster_state in ['present', 'query']

- name: Reset the python interpreter
  set_fact:
    ansible_python_interpreter: "{{ old_python_interpreter }}"
  when: cluster_venv != None
